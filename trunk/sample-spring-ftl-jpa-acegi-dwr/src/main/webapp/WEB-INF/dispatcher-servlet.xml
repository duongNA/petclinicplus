<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
       http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr-2.0.xsd">


	<!-- ========================= MESSAGE SOURCE DEFINITION ========================= -->

	<!--
		Message source for this context, loaded from localized "messages_xx" files.
		Could also reside in the root application context, as it is generic,
		but is currently just used within PetClinic's web tier.
	-->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="messages" />
	</bean>


	<!-- ========================= MAPPING DEFINITIONS ========================= -->

	<!--
		This bean is an explicit URL mapper that is used by the "petclinicplus" DispatcherServlet
		It is used instead of the default BeanNameUrlHandlerMapping.
	-->
	<bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
		<property name="mappings">
			<props>
				<prop key="/dwr/**">dwrController</prop>
				<prop key="/welcome.htm">clinicController</prop>
				<prop key="/vets.htm">clinicController</prop>
				<prop key="/editVet.htm">editVetForm</prop>
				<prop key="/findOwners.htm">findOwnersForm</prop>
				<prop key="/owner.htm">clinicController</prop>
				<prop key="/addOwner.htm">addOwnerForm</prop>
				<prop key="/editOwner.htm">editOwnerForm</prop>
				<prop key="/addPet.htm">addPetForm</prop>
				<prop key="/editPet.htm">editPetForm</prop>
				<prop key="/addVisit.htm">addVisitForm</prop>
				<prop key="/login.htm">authUrlFilenameViewController</prop>
				<prop key="/administration.htm">authUrlFilenameViewController</prop>
				<prop key="/errorAccessDenied.htm">authUrlFilenameViewController</prop>
				<prop key="/errorDataAccess.htm">urlFilenameViewController</prop>
			</props>
		</property>
		<property name="alwaysUseFullPath" value="true" />
	</bean>

	<!--
		This bean resolves specific types of exception to corresponding error views.
		The default behaviour of DispatcherServlet is to propagate all exceptions to the
		servlet container: This will happen here with all other types of exception.
	-->
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.springframework.dao.DataAccessException">errorDataAccess</prop>
				<prop key="org.springframework.transaction.TransactionException">
					errorDataAccess
				</prop>
			</props>
		</property>
	</bean>


	<!--
		This bean provides explicit View mappings in a resource bundle instead of the
		default InternalResourceViewResolver. It fetches the view mappings from
		localized "views_xx" classpath files, i.e. "/WEB-INF/classes/views.properties"
		or "/WEB-INF/classes/views_de.properties".
		
		Symbolic view names returned by Controllers will be resolved by this bean
		using the respective properties file, which defines arbitrary mappings between
		view names and resources.
	-->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="cache" value="true" />
		<property name="prefix" value="/" />
		<property name="suffix" value=".ftl" />
		<property name="exposeSpringMacroHelpers" value="true" />
		<property name="requestContextAttribute" value="rc" />
	</bean>



	<bean id="freemarkerConfig"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/freemarker/" />
		<property name="freemarkerVariables">
			<map>
				<entry key="xml_escape">
					<bean class="freemarker.template.utility.XmlEscape"></bean>
				</entry>
			</map>
		</property>
		<property name="freemarkerSettings">
			<props>
				<prop key="datetime_format">dd.MM.yyyy</prop>
			</props>
		</property>
	</bean>


	<!-- ========================================================================= -->
	<!-- CONTROLLER DEFINITIONS                                                    -->
	<!-- ========================================================================= -->

	<!-- 
		Extracts the view name from the URL. 
	-->
	<bean id="urlFilenameViewController"
		class="org.springframework.web.servlet.mvc.UrlFilenameViewController" />

	<!-- 
		Extracts the view name from the URL and puts the Authentication object
		into the model (if available).
	-->
	<bean id="authUrlFilenameViewController"
		class="net.larsbehnke.petclinicplus.web.AuthUrlFilenameViewController" />


	<!-- 
		The DWR controller that makes ajaxFacade accessible remotely
	-->
	<dwr:controller id="dwrController" debug="true">
		<dwr:config-param name="activeReverseAjaxEnabled" value="true" />
	</dwr:controller>
	<dwr:configuration>
		<dwr:create type="new" javascript="JsDate" class="java.util.Date" />
	</dwr:configuration>

	<!--
		This bean is a MultiActionController that manages general View rendering.
		It uses the "clinicControllerResolver" bean below for method name resolution.
	-->
	<bean id="clinicController" class="net.larsbehnke.petclinicplus.web.ClinicController">
		<property name="methodNameResolver" ref="clinicControllerResolver" />
		<property name="clinic" ref="clinic" />
	</bean>

	<!--
		This bean is a MethodNameResolver definition for a MultiActionController.
		It maps URLs to methods for the "clinicController" bean.
	-->
	<bean id="clinicControllerResolver"
		class="org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver">
		<property name="mappings">
			<props>
				<prop key="/welcome.htm">welcomeHandler</prop>
				<prop key="/vets.htm">vetsHandler</prop>
				<prop key="/owner.htm">ownerHandler</prop>
			</props>
		</property>
	</bean>

	<!--
		This bean is a SimpleFormController that manages the editVet use case.
		It uses the "vetValidator" and "clinic" beans.
	-->
	<bean id="editVetForm" class="net.larsbehnke.petclinicplus.web.EditVetForm">
		<property name="formView" value="vetForm" />
		<property name="successView" value="redirect:vets.htm" />
		<property name="validator" ref="vetValidator" />
		<property name="clinic" ref="clinic" />
	</bean>

	<!--
		This bean is a SimpleFormController that manages the findOwner use case.
		It uses the "findOwnersValidator" and "clinic" beans.
	-->
	<bean id="findOwnersForm" class="net.larsbehnke.petclinicplus.web.FindOwnersForm">
		<property name="formView" value="findOwners" />
		<property name="selectView" value="owners" />
		<property name="successView" value="redirect:owner.htm" />
		<property name="clinic" ref="clinic" />
		<property name="ownerRequestLogger" ref="ownerRequestLogger" />
	</bean>

	<!--
		This bean is a SimpleFormController that manages the addOwner use case.
		It uses the "ownerValidator" and "clinic" beans.
	-->
	<bean id="addOwnerForm" class="net.larsbehnke.petclinicplus.web.AddOwnerForm">
		<property name="formView" value="ownerForm" />
		<property name="successView" value="redirect:owner.htm" />
		<property name="validator" ref="ownerValidator" />
		<property name="clinic" ref="clinic" />
	</bean>

	<!--
		This bean is a SimpleFormController that manages the editOwner use case.
		It uses the "ownerValidator" and "clinic" beans.
	-->
	<bean id="editOwnerForm" class="net.larsbehnke.petclinicplus.web.EditOwnerForm">
		<property name="formView" value="ownerForm" />
		<property name="successView" value="redirect:owner.htm" />
		<property name="validator" ref="ownerValidator" />
		<property name="clinic" ref="clinic" />
	</bean>


	<!--
		This bean is a SimpleFormController that manages the addPet use case.
		It uses the "petValidator" and "clinic" beans.
	-->
	<bean id="addPetForm" class="net.larsbehnke.petclinicplus.web.AddPetForm">
		<property name="formView" value="petForm" />
		<property name="successView" value="redirect:owner.htm" />
		<property name="validator" ref="petValidator" />
		<property name="clinic" ref="clinic" />
	</bean>

	<!--
		This bean is a SimpleFormController that manages the editPet use case.
		It uses the "petValidator" and "clinic" beans.
	-->
	<bean id="editPetForm" class="net.larsbehnke.petclinicplus.web.EditPetForm">
		<property name="formView" value="petForm" />
		<property name="successView" value="redirect:owner.htm" />
		<property name="validator" ref="petValidator" />
		<property name="clinic" ref="clinic" />
	</bean>


	<!--
		This bean is a SimpleFormController that manages the addVisit use case.
		It uses the "visitValidator" and "clinic" beans.
	-->
	<bean id="addVisitForm" class="net.larsbehnke.petclinicplus.web.AddVisitForm">
		<property name="formView" value="visitForm" />
		<property name="successView" value="redirect:owner.htm" />
		<property name="validator" ref="visitValidator" />
		<property name="clinic" ref="clinic" />
	</bean>

	<!-- ========================================================================= -->
	<!-- Programmatic Validators                                                                -->
	<!-- ========================================================================= -->

	<!--
		Validator for visit forms, implementing Spring's Validator interface.
		Could also reside in the root application context, as it is generic,
		but is currently just used within PetClinic's web tier.
	-->
	<bean id="visitValidator" class="net.larsbehnke.petclinicplus.validation.VisitValidator" />

	<!--
		Validator for pet forms, implementing Spring's Validator interface.
		Could also reside in the root application context, as it is generic,
		but is currently just used within PetClinic's web tier.
	-->
	<bean id="petValidator" class="net.larsbehnke.petclinicplus.validation.PetValidator" />

	<!--
		Validator for owner forms, implementing Spring's Validator interface.
		Could also reside in the root application context, as it is generic,
		but is currently just used within PetClinic's web tier.
	-->
	<bean id="ownerValidator" class="net.larsbehnke.petclinicplus.validation.OwnerValidator" />

	<!--
		Validator for pet forms, implementing Spring's Validator interface.
		Could also reside in the root application context, as it is generic,
		but is currently just used within PetClinic's web tier.
	-->
	<bean id="vetValidator" class="net.larsbehnke.petclinicplus.validation.VetValidator" />


	<!-- ========================================================================= -->
	<!-- Ajax (DWR) Support                                                           -->
	<!-- ========================================================================= -->


	<bean id="ajaxService" class="net.larsbehnke.petclinicplus.dwr.AjaxService">
		<dwr:remote javascript="AjaxService">
			<dwr:include method="findOwnerNames" />
			<dwr:include method="getOwnerName" />
			<dwr:include method="getUserName" />
		</dwr:remote>
		<property name="clinic" ref="clinic" />
	</bean>


</beans>
