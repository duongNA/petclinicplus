<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

	<display-name>PetClinicPlus</display-name>
	<description>A J2EE sample application</description>

	<!-- 
		Makes sure that all session attributes are serializable.
	-->
	<distributable />

	<!--
		Key of the system property that should specify the root directory of this
		web app. Applied by WebAppRootListener or Log4jConfigListener. See
		http://www.gridpulse.com/articles/using-spring-webapprootlistener-access-webapp-root.html
	-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>webapp.root</param-value>
	</context-param>

	<!--
		Location of the Log4J config file, for initialization and refresh checks.
		Applied by Log4jConfigListener.
	-->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>3000</param-value>
	</context-param>


	<!--
		Location of the XML file that defines the root application context.
		Applied by ContextLoaderServlet.
	-->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/app-ctx-jpa.xml /WEB-INF/app-ctx-acegi.xml</param-value>
	</context-param>

	<!-- 
		Notice that the filter in web.xml is actually a FilterToBeanProxy, and not the filter that will actually
		implement the logic of the filter. What FilterToBeanProxy does is delegate the Filter's methods
		through to a bean which is obtained from the Spring application context. This enables the bean to
		benefit from the Spring application context lifecycle support and configuration flexibility. The bean
		must implement javax.servlet.Filter. 
		The FilterToBeanProxy only requires a single initialization parameter, targetClass or targetBean. The
		targetClass parameter locates the first object in the application context of the specified class, whilst
		targetBean locates the object by bean name.
	-->
	<filter>
		<filter-name>Acegi Filter Chain Proxy</filter-name>
		<filter-class>org.acegisecurity.util.FilterToBeanProxy</filter-class>
		<init-param>
			<param-name>targetClass</param-name>
			<param-value>org.acegisecurity.util.FilterChainProxy</param-value>
		</init-param>
	</filter>



	<!-- 
		Main SiteMesh filter for applying Decorators to entire Pages.
		See http://www.onjava.com/pub/a/onjava/2004/09/22/sitemesh.html
	-->
	<filter>
		<filter-name>SitemeshFilter</filter-name>
		<filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>
		<init-param>
			<param-name>debug.pagewriter</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<!-- 
		Compression filter.
	-->
	<filter>
		<filter-name>GZipFilter</filter-name>
		<filter-class>net.sf.ehcache.constructs.web.filter.GzipFilter</filter-class>
		<init-param>
			<param-name>exceptionsToLogDifferently</param-name>
			<param-value>net.sf.ehcache.CacheException, java.lang.NullPointerException</param-value>
		</init-param>
		<init-param>
			<param-name>exceptionsToLogDifferentlyLevel</param-name>
			<param-value>debug</param-value>
		</init-param>
		<init-param>
			<param-name>suppressStackTraces</param-name>
			<param-value>false</param-value>
		</init-param>


	</filter>

    <!-- 
    	Cache filter. Uses URI + Request parameters as cache key. Consider implementing a filter that takes request attributes
    	into account.
	<filter>
		<filter-name>SimplePageCachingFilter</filter-name>
		<filter-class>net.sf.ehcache.constructs.web.filter.SimplePageCachingFilter</filter-class>
		<init-param>
			<param-name>suppressStackTraces</param-name>
			<param-value>false</param-value>
		</init-param>
	</filter>
    -->
	
	<!-- 
		It sets the character encoding of the request, which is often needed because 
		most most browsers don't specify it.
	-->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<!-- 
		Cache pages (request uri and request string as cache key).
	<filter-mapping>
		<filter-name>SimplePageCachingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	-->

	<!-- 
		Control browser caching.
		Note that filter mapping is defined via filter parameter.
	-->
	<filter>
		<filter-name>BrowserCacheFilter</filter-name>
		<filter-class>net.larsbehnke.petclinicplus.filters.BrowserCacheFilter</filter-class>
		<init-param>
			<param-name>include</param-name>
			<param-value>/**/*.gif,/**/*.png,/**/*.jpg,/**/*.js,/**/*.css</param-value>
		</init-param>
		<init-param>
			<param-name>exclude</param-name>
			<param-value>/**/DynamicImage.gif</param-value>
		</init-param>
		<init-param>
			<param-name>noLocalhostCaching</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>seconds</param-name>
			<param-value>3600</param-value>
		</init-param>
		
	</filter>

<!-- 
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
 -->
 	
	<!-- 
		Compress everything.
	-->
	<filter-mapping>
		<filter-name>GZipFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- 
		If you're using SiteMesh, ensure Acegi Security filters execute before the SiteMesh filters 
		are called. This enables the SecurityContextHolder to be populated in time for use by 
		SiteMesh decorators.
	-->
	<filter-mapping>
		<filter-name>Acegi Filter Chain Proxy</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>

	<!-- 
		Sitemesh filter must execute after Acegi filter. See above.
	-->
	<filter-mapping>
		<filter-name>SitemeshFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
		<dispatcher>FORWARD</dispatcher>
	</filter-mapping>



	<!-- 
		Enable browser caching for static data.
		An ANT style mapping is defined via filter parameter.
	-->
	<filter-mapping>
		<filter-name>BrowserCacheFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


	<!--
		Configures Log4J for this web app.
		As this context specifies a context-param "log4jConfigLocation", its file path
		is used to load the Log4J configuration, including periodic refresh checks.
		
		Would fall back to default Log4J initialization (non-refreshing) if no special
		context-params are given.
		
		Exports a "web app root key", i.e. a system property that specifies the root
		directory of this web app, for usage in log file paths.
		This web app specifies "petclinic.root" (see log4j.properties file).
	-->
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>


	<!--
		Loads the root application context of this web app at startup,
		by default from "/WEB-INF/applicationContext.xml".
		Note that you need to fall back to Spring's ContextLoaderServlet for
		J2EE servers that do not follow the Servlet 2.4 initialization order.
		
		Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
		to access it anywhere in the web application, outside of the framework.
		
		The root context is the parent of all servlet-specific contexts.
		This means that its beans are automatically available in these child contexts,
		both for getBean(name) calls and (external) bean references.
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>


	<!-- 
		This tiny utility is triggered on appliation start and checks if database tables
		have been filled with initial data (you should consider removing this
		tool in real world applicaitons).
	-->
	<listener>
		<listener-class>
			net.larsbehnke.petclinicplus.web.listener.PopulateDbListener
		</listener-class>
	</listener>

	<!--
		Servlet that dispatches request to registered handlers (Controller implementations).
		Has its own application context, by default defined in "{servlet-name}-servlet.xml",
		i.e. "petclinic-servlet.xml".
		
		A web app can contain any number of such servlets.
		Note that this web app has a shared root application context, serving as parent
		of all DispatcherServlet contexts.
	-->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
	</servlet>

	<!--
		SiteMesh is a web-page layout and decoration framework and web- application integration 
		framework to aid in creating large sites consisting of many pages for which a 
		consistent look/feel, navigation and layout scheme is required. It is comparable to
		Apache Tiles - just simpler.
		As of SiteMesh 2.0.2 Freemarker (.ftl) decorators are supported. 
	-->
	<servlet>
		<servlet-name>sitemesh-freemarker</servlet-name>
		<servlet-class>
			com.opensymphony.module.sitemesh.freemarker.FreemarkerDecoratorServlet
		</servlet-class>
		<init-param>
			<param-name>TemplatePath</param-name>
			<param-value>/WEB-INF/decorators</param-value>
		</init-param>
		<init-param>
			<param-name>default_encoding</param-name>
			<param-value>ISO-8859-1</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!--
		Maps the petclinic dispatcher to *.htm. All handler mappings in
		petclinic-servlet.xml will by default be applied to this subpath.
		If a mapping isn't a /* subpath, the handler mappings are considered
		relative to the web app root.
		
		NOTE: A single dispatcher can be mapped to multiple paths, like any servlet.
	-->
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.htm</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/dwr</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/dwr/*</url-pattern>
	</servlet-mapping>


	<!-- 
		Treats files with *.dec extension as Sitemesh decorators.
	-->
	<servlet-mapping>
		<servlet-name>sitemesh-freemarker</servlet-name>
		<url-pattern>*.dec</url-pattern>
	</servlet-mapping>

	<!-- 
		After 10 minutes an idle session will be invalidated.
	-->
	<session-config>
		<session-timeout>10</session-timeout>
	</session-config>

	<welcome-file-list>

		<!-- Redirects to "welcome.htm" for dispatcher handling -->
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>

	<!-- 
		<error-page>
		<exception-type>java.lang.Exception</exception-type>
		<location>/WEB-INF/jsp/uncaughtException.jsp</location>
		</error-page>
	-->

	<!--
		Reference to PetClinic database.
		Only needed if not using a local DataSource but a JNDI one instead.
	-->
	<!--
		<resource-ref>
		<res-ref-name>jdbc/petclinic</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
		</resource-ref>
	-->

</web-app>
